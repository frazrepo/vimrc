snippet ssel "Select from table" b
	select * from ${1:table}
endsnippet

snippet st10 "Select top 10 from table" b
	select top 10 * from ${1:table}
endsnippet

snippet st100 "Select top 100 from table" b
	select top 100 * from ${1:table}
endsnippet

snippet sfw "Select from table where" b
	select * from ${1:table}
	where ${2:column} = '${3:value}'
endsnippet

snippet sdel "Delete from table where" b
	delete from ${1:table}
	where ${2:column} = '${3:value}'
endsnippet

snippet salter-add-after "salter-add-after" b
	ALTER TABLE ${1:table} ADD COLUMN ${2:col_name} ${3:INT}${4: NOT NULL} AFTER ${5:col_name};
endsnippet

snippet salter-add-first "salter-add-first" b
	ALTER TABLE ${1:table} ADD COLUMN ${2:col_name} ${3:INT}${4: NOT NULL} FIRST;
endsnippet

snippet salter-add "salter-add" b
	ALTER TABLE ${1:table} ADD COLUMN ${2:col_name} ${3:INT}${4: NOT NULL};
endsnippet

snippet salter-auto-increment "salter-auto-increment" b
	ALTER TABLE ${1:table} AUTO_INCREMENT = ${2:1};
endsnippet

snippet salter-change "salter-change" b
	ALTER TABLE ${1:table} CHANGE ${2:old_name} ${3:new_name} ${4:new_type}${5: NOT NULL};
endsnippet

snippet salter-db-charset "salter-db-charset" b
	ALTER DATABASE ${1:table} CHARACTER SET ${2:utf8} COLLATE ${3:utf8_unicode_ci};
endsnippet

snippet salter-drop "salter-drop" b
	ALTER TABLE ${1:table} DROP COLUMN ${2:col_name};
endsnippet

snippet salter-fk-drop "salter-fk-drop" b
	ALTER TABLE $1
	DROP FOREIGN KEY ${2:fk_${3:the_table}_${4:far_table}};
endsnippet

snippet salter--fk "salter--fk" b
	ALTER TABLE $1
	ADD INDEX fk_$1_$3_idx ($2 ASC),
	ADD CONSTRAINT fk_${1:the_table}_$3
	FOREIGN KEY (${2:foreign_key})
	REFERENCES ${3:far_table} (${4:far_key})
	ON DELETE NO ACTION
	ON UPDATE CASCADE
endsnippet

snippet salter-fk "salter-fk" b
	ALTER TABLE $1
	ADD CONSTRAINT fk_${1:the_table}_$3
	FOREIGN KEY (${2:foreign_key})
	REFERENCES ${3:far_table} (${4:far_key})
	ON DELETE NO ACTION
	ON UPDATE CASCADE
endsnippet

snippet salter-idx-drop "salter-idx-drop" b
	ALTER TABLE ${1:table} DROP INDEX ${3:index_name};
endsnippet

snippet salter-idx "salter-idx" b
	ALTER TABLE ${1:table} ADD ${2:INDEX} ${3:index_name}(${4:field} ASC$5);
endsnippet

snippet salter-modify "salter-modify" b
	ALTER TABLE ${1:table} MODIFY ${2:field} ${3:NEW-FIELD-TYPE}${4: NOT NULL} ${5:AFTER ${6:field}};
endsnippet

snippet salter-sort "salter-sort" b
	ALTER TABLE ${1:table} ORDER BY ${2:field};
endsnippet

snippet salter-table-charset "salter-table-charset" b
	ALTER TABLE ${1:table} CHARACTER SET ${2:utf8} COLLATE ${3:utf8_unicode_ci};
endsnippet

snippet salter-table-rename "salter-table-rename" b
	ALTER TABLE ${1:table} RENAME TO ${2:new_name};
endsnippet

snippet salter-uk "salter-uk" b
	ALTER TABLE ${1:table_name} ADD UNIQUE unique_${5:index_name} (${11:column_1}${15:, ${18:column_2}});
endsnippet

snippet s-case-wb "s-case-wb" b
	WHEN ${1:var_name} ${2:=} '${3:value}' THEN BEGIN
	${0:-- SELECT 'case $3'};
	END;
endsnippet

snippet scase-wb "scase-wb" b
	WHEN '${1:value}' THEN BEGIN
	${0:-- SELECT 'case $1'};
END;

endsnippet

snippet s-case-w "s-case-w" b
	WHEN ${1:var_name} ${2:=} '${3:value}' THEN ${0:-- SELECT 'case $3'};
endsnippet

snippet scase-w "scase-w" b
	WHEN '${1:value}' THEN ${0:-- SELECT 'case $1'};
endsnippet

snippet scur "scur" b
	DECLARE ${5:var_1} ${7:VARCHAR(255)};
	DECLARE ${10:done} INT DEFAULT 0;
	DECLARE ${30:cur} CURSOR FOR ${40:SELECT User FROM mysql.user};
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET ${10:done} = 1;

	OPEN ${30:cur};
	REPEAT
		FETCH ${30:cur} INTO ${5:var_1};
		IF NOT ${10:done} THEN
			${0:-- Your code ...
				SELECT ${5:var_1};
				}
		END IF;
	UNTIL ${10:done} END REPEAT;
	CLOSE ${30:cur};
endsnippet

snippet sdec-cur "sdec-cur" b
	DECLARE ${1:cursor_name} FOR ${0:-- SELECT ...};
endsnippet

snippet s-dec "s-dec" b
	DECLARE ${1:var_name} ${2:INT} DEFAULT '${3:value}';
endsnippet

snippet sdec-h "sdec-h" b
	DECLARE CONTINUE HANDLER FOR SQLSTATE '${1:02000}' ${2:SET done = 1};
endsnippet

snippet s-dec-s "s-dec-s" b
	DECLARE ${1:var_name} VARCHAR(${2:255}) DEFAULT '${3:value}';
endsnippet

snippet sdec-s "sdec-s" b
	DECLARE ${1:var_name} VARCHAR(${2:255});
endsnippet

snippet sdec "sdec" b
	DECLARE ${1:var_name} ${2:INT};
endsnippet

snippet sif "sif" b
	IF ${1:var} ${2:=} ${3:value} THEN
		${4:-- body}
	END IF;
endsnippet

snippet sloop "sloop" b
	${1:label_name}: LOOP
		SET ${10:var_name} = ${10} ${11:+} ${12:1};

		${0:-- Your code ...}

		IF ${10} ${20:>=} ${22:10} THEN
			LEAVE ${1:label_name};
		END IF;
	END LOOP ${1:label_name};
endsnippet

snippet s-repeat "s-repeat" b
	REPEAT
		BEGIN
			${0:-- Your code ...}
		END;
	UNTIL ${1:var_name} ${2:>} ${3:10} END REPEAT;
endsnippet

snippet srepeat "srepeat" b
	REPEAT ${0:/* Your code ... */}; UNTIL ${1:var_name} ${2:>} ${3:10} END REPEAT;
endsnippet

snippet sdb-drop "sdb-drop" b
	DROP DATABASE ${1:db_name};
endsnippet

snippet sdb "sdb" b
	CREATE DATABASE ${1:db_name} DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
endsnippet

snippet sd "sd" b
	DELETE FROM ${1:table}${2: WHERE $3 = '$4'};
endsnippet

snippet sfunc-drop "sfunc-drop" b
	DROP FUNCTION IF EXISTS ${1:name};
endsnippet

snippet sfunc-list "sfunc-list" b
	${1:SELECT name, param_list, comment FROM mysql.proc WHERE db=DATABASE() AND type = 'FUNCTION';}
endsnippet

snippet s-func "s-func" b
	DROP FUNCTION IF EXISTS ${1:function_name};
	CREATE FUNCTION ${1}(${2:arg_name} ${3:INT}) RETURNS ${4:INT}
	BEGIN
		$5
	END;
endsnippet

snippet sfunc "sfunc" b
	CREATE FUNCTION ${1:function_name}(${2:arg_name} ${3:INT}) RETURNS ${4:INT}
	BEGIN
		$5
	END;
endsnippet

snippet sione "sione" b
	INSERT INTO $1 SET
	${2:name} = '${3:value}'${4:,
	};
endsnippet

snippet sifrom "sifrom" b
	INSERT INTO ${1:table} SELECT ${2:*} FROM ${3:${4:database}.}${5:$1};
endsnippet

snippet si "si" b
	INSERT INTO $1($2) VALUES
	($3)${4:,
	};
endsnippet

snippet sutc "sutc" b
	SELECT UNIX_TIMESTAMP(NOW());
endsnippet

snippet spriv-add-all "spriv-add-all" b
	GRANT ALL PRIVILEGES ON *.* TO '${4:user_name}'@'${5:localhost}';
endsnippet

snippet spriv-add "spriv-add" b
	GRANT ${1:ALL} PRIVILEGES ON ${2:db_name}.${3:table_name} TO '${4:user_name}'@'${5:localhost}';
endsnippet

snippet spriv-drop-all "spriv-drop-all" b
	REVOKE ALL ON *.* FROM '${4:user_name}'@'${5:localhost}';
endsnippet

snippet spriv-drop "spriv-drop" b
	REVOKE ${1:ALL} ON ${2:db_name}.${3:table_name} FROM '${4:user_name}'@'${5:localhost}';
endsnippet

snippet spriv-list "spriv-list" b
	SHOW GRANTS FOR '${1:user_name}'@'${2:localhost}'\\G
endsnippet

snippet spriv-refresh "spriv-refresh" b
	${0:FLUSH PRIVILEGES;}
endsnippet

snippet sproc-drop "sproc-drop" b
	DROP PROCEDURE IF EXISTS ${1:name};
endsnippet

snippet sproc-list "sproc-list" b
	${1:SELECT name, param_list, comment FROM mysql.proc WHERE db=DATABASE() AND type = 'PROCEDURE';}
endsnippet

snippet s-proc "s-proc" b
	DROP PROCEDURE IF EXISTS ${1:procedure_name};
	CREATE PROCEDURE ${1}(
		${2:arg_name} ${3:INT}${4:,}
	) BEGIN
		$5
	END;
endsnippet

snippet sproc "sproc" b
	CREATE PROCEDURE ${1:procedure_name}(
	${2:arg_name} ${3:INT}${4:,}
	) BEGIN
		$5
	END;
endsnippet

snippet s-and "s-and" b
	AND ( $1 ${2:=} '$3' ) 
endsnippet

snippet sand "sand" b
	AND ( $1 ) 
endsnippet

snippet salias "salias" b
	$1.$2 AS $3
endsnippet

snippet s-alias "s-alias" b
	, $1.$2 AS $3
endsnippet

snippet s- "s-" b
	, $1.$2
endsnippet

snippet s "s" b
	$1.$2
endsnippet

snippet se "se" b
	( $1 ${2:=} '$3' ) 
endsnippet

snippet sf "sf" b
	FROM $1 AS $2
endsnippet

snippet sg "sg" b
	GROUP BY $1
endsnippet

snippet sh "sh" b
	HAVING ( $1 ${2:=} '$3' ) 
endsnippet

snippet sj "sj" b
	INNER JOIN $1 AS ${2:${1/(.)[^_]*(?:_(.))?.*/$1$2/}} ON ( ${2:${1/(.)[^_]*(?:_(.))?.*/$1$2/}}.${4:id} = $5.${6:id} )
endsnippet

snippet sjleft "sjleft" b
	LEFT JOIN $1 AS ${2:${1/(.)[^_]*(?:_(.))?.*/$1$2/}} ON ( ${2:${1/(.)[^_]*(?:_(.))?.*/$1$2/}}.${4:id} = $5.${6:id} )
endsnippet

snippet sjright "sjright" b
	RIGHT JOIN $1 AS ${2:${1/(.)[^_]*(?:_(.))?.*/$1$2/}} ON ( ${2:${1/(.)[^_]*(?:_(.))?.*/$1$2/}}.${4:id} = $5.${6:id} )
endsnippet

snippet sor "sor" b
	OR ( $1 ) 
endsnippet

snippet so "so" b
	ORDER BY $1${2: DESC}
endsnippet

snippet sunion "sunion" b
	(
		$1
	) UNION (
		$2
	)
endsnippet

snippet sw "sw" b
	WHERE ( $1 ${2:=} '$3' ) 
endsnippet

snippet sscount "sscount" b
	SELECT COUNT(${1:*}) FROM $2 AS ${2/(.).*/$1/}
endsnippet

snippet ssinline "ssinline" b
	SELECT ${3/(.).*/$1/}.$1 FROM $3 AS ${3/(.).*/$1/}
endsnippet

snippet ssmax "ssmax" b
	SELECT MAX(${1:id}) FROM $2 AS ${2/(.).*/$1/}
endsnippet

snippet ssmin "ssmin" b
	SELECT MIN(${1:id}) FROM $2 AS ${2/(.).*/$1/}
endsnippet

snippet sss "sss" b
	SELECT '${1:My String}';
endsnippet

snippet ssv "ssv" b
	SELECT ${1:var_name};
endsnippet

snippet ss "ss" b
	SELECT
		${4:${3/(.).*/$1/}}.${1:*}
	FROM $3 AS ${4:${3/(.).*/$1/}}
endsnippet

snippet shcols "shcols" b
	${2:SHOW FULL COLUMNS FROM ${1:table};}
endsnippet

snippet shcreate "shcreate" b
	${2:SHOW CREATE TABLE ${1:table};}
endsnippet

snippet shidx "shidx" b
	${2:SHOW INDEX FROM ${1:table};}
endsnippet

snippet shrel "shrel" b
	${0:SELECT CONCAT(
	constraint_name, ' : ',
	table_name, '.', column_name, ' -> ', 
  referenced_table_name, '.', referenced_column_name
) AS relations_list
FROM information_schema.key_column_usage
WHERE table_schema = ${1:DATABASE()}
	AND table_name = '${2:table_name}'
  AND referenced_table_name IS NOT NULL;
}
endsnippet

snippet sfk "sfk" b
	INDEX fk_$1_$3_idx ($2 ASC),
	CONSTRAINT fk_${1:the_table}_$3
	FOREIGN KEY (${2:foreign_key})
	REFERENCES ${3:far_table} (${4:far_key})
	ON DELETE NO ACTION
	ON UPDATE CASCADE
endsnippet

snippet sidx-txt "sidx-txt" b
	FULLTEXT INDEX $1_idx (${1:column} ASC$2)${3:,
}
endsnippet

snippet sidx "sidx" b
	INDEX $1_idx (${1:email} ASC$2)${3:,
}
endsnippet

snippet smany-many "smany-many" b
	CREATE INDEX $4_idx ON $1 ($4 ASC);
	CREATE INDEX $5_idx ON $2 ($5 ASC);

	CREATE TABLE IF NOT EXISTS ${3:$1_$2} (
		${1:table1}_${4:id} INT UNSIGNED NOT NULL,
		${2:table2}_${5:id} INT UNSIGNED NOT NULL,

	PRIMARY KEY ($1_$4, $2_$5),
		INDEX fk_$3_$1_$4_idx ($1_$4 ASC),
		INDEX fk_$3_$2_$5_idx ($2_$5 ASC),

	CONSTRAINT fk_$3_$1
		FOREIGN KEY ($1_$4)
		REFERENCES $1 ($4)
		ON DELETE ${6:NO ACTION}
		ON UPDATE CASCADE,

	CONSTRAINT fk_$3_$2
		FOREIGN KEY ($2_$5)
		REFERENCES $2 ($5)
		ON DELETE $6
		ON UPDATE CASCADE
	) ENGINE = InnoDB;
endsnippet

snippet spk "spk" b
	PRIMARY KEY pk_${1:id}($1)${2:,
}
endsnippet

snippet stable-drop "stable-drop" b
	DROP TABLE IF EXISTS $1;
endsnippet


snippet stable "stable" b
	CREATE TABLE IF NOT EXISTS ${1:table_name} (
		${2:id} INT UNSIGNED NOT NULL AUTO_INCREMENT,
		${3:name} VARCHAR(255)
	PRIMARY KEY pk_$2($2)
	) ENGINE = InnoDB;
endsnippet

snippet suk "suk" b
	UNIQUE KEY unique_${1:id}($1$2)${3:,
}
endsnippet

snippet strig-drop "strig-drop" b
	DROP TRIGGER IF EXISTS ${1:name};
endsnippet

snippet s-trig-list "s-trig-list" b
	SHOW TRIGGERS FROM ${1:full_db_name} LIKE '${2:table_name}%'\\G
endsnippet

snippet strig-list "strig-list" b
	SHOW TRIGGERS LIKE '${2:table_name}%'\\G
endsnippet

snippet s-trig "s-trig" b
	DROP TRIGGER IF EXISTS ${1:trigger_name};
CREATE TRIGGER ${1} ${2:AFTER} ${3:INSERT} ON ${4:table_name} FOR EACH ROW
BEGIN
	${5: -- Use NEW and OLD constants for access to row}
END;
endsnippet

snippet strig "strig" b
	CREATE TRIGGER ${1:trigger_name} ${2:AFTER} ${3:INSERT} ON ${4:table_name} FOR EACH ROW
BEGIN
	${5: -- Use NEW and OLD constants for access to row}
END;
endsnippet

snippet su "su" b
	UPDATE ${1:table} SET
		$2 = '$3'${4:,}
	WHERE $5 = '$6';
endsnippet

snippet suser-add-hash "suser-add-hash" b
	CREATE USER '${1:username}'@'${2:localhost}' IDENTIFIED BY PASSWORD '*832EB84CB764129D05D498ED9CA7E5CE9B8F83EB';
endsnippet

snippet s-user-add "s-user-add" b
	CREATE USER '${1:username}'@'${2:localhost}' IDENTIFIED BY '${3:password}';
endsnippet

snippet suser-add "suser-add" b
	CREATE USER '${1:username}'@'${2:localhost}';
endsnippet

snippet suser-drop "suser-drop" b
	DROP USER '${1:username}'@'${2:localhost}';
endsnippet

snippet suser-list "suser-list" b
	SELECT user, host, password FROM mysql.user;
endsnippet

snippet suser-pwd "suser-pwd" b
	SET PASSWORD ${1:FOR '${2:username}'@'${3:localhost}'} = PASSWORD('${4:password}');
endsnippet
