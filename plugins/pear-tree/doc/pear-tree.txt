*pear-tree.txt*    A painless, powerful Vim auto-pair plugin

                                  Pear Tree
CONTENTS                                                           *pear-tree*

    1. Introduction ........................ |pear-tree-introduction|
    2. Requirements ........................ |pear-tree-requirements|
    3. Options ............................. |pear-tree-options|
    4. Mappings ............................ |pear-tree-mappings|
    5. Commands ............................ |pear-tree-commands|

==============================================================================
INTRODUCTION                                          *pear-tree-introduction*

Pear Tree automatically pairs parentheses, quotes, HTML tags, and many other
text items based on an easily defined set of rules. It also provides pair-wise
deletion, newline expansion, and other typical auto-pair features without
interfering with Vim's undo or dot-repeat functionality.

Each of these auto-pairing actions may be done intelligently using Pear Tree's
smart pair options. If these options are enabled, Pear Tree will examine the
balance of existing pairs to decide what action it should take to maintain or
restore pair balance in the buffer.

==============================================================================
REQUIREMENTS                                          *pear-tree-requirements*

Pear Tree requires Vim version 7.4 or greater for its basic functionality,
though a version greater than 7.4.849 is recommended, as this version allows
Pear Tree to work properly with dot-repeat and undo.

Smart pairs can make use of timeouts to prevent noticeable delays when typing
in insert mode. This requires Vim to be compiled with |+reltime| support.

==============================================================================
OPTIONS                                                    *pear-tree-options*

    g:pear_tree_pairs ...................... |g:pear_tree_pairs|
    g:pear_tree_ft_disabled ................ |g:pear_tree_ft_disabled|
    g:pear_tree_repeatable_expand .......... |g:pear_tree_repeatable_expand|
    g:pear_tree_smart_openers .............. |g:pear_tree_smart_openers|
    g:pear_tree_smart_closers .............. |g:pear_tree_smart_closers|
    g:pear_tree_smart_backspace ............ |g:pear_tree_smart_backspace|
    g:pear_tree_timeout .................... |g:pear_tree_timeout|

------------------------------------------------------------------------------
                                                           *g:pear_tree_pairs*
                                                           *b:pear_tree_pairs*
Type: dictionary ~
Default: { ~
    \   '(': {'closer': ')'}, ~
    \   '[': {'closer': ']'}, ~
    \   '{': {'closer': '}'}, ~
    \   "'": {'closer': "'"}, ~
    \   '"': {'closer': '"'} ~
    \ } ~

Define the opening strings and the closers with which they are to be matched.
Buffer-local rules take priority over global rules. Define `b:pear_tree_pairs`
in the appropriate file in your ftplugin folder to override the default rules
for certain filetypes.

Each rule in the dictionary has the following form: >
    opener_string: {'closer': closer_string, [options ...]}
<
In the rule, {opener_string} is the string that should be typed, and
{closer_string} is the string to be automatically inserted. Both may be any
length and may contain a wildcard part (see |pear-tree-wildcards|).

Each rule can also contain options that modify the pairing behavior
(see |pear-tree-rule-options|).

Wildcards:                                               *pear-tree-wildcards*

Pear Tree supports wildcard matching in string pairs. Wildcards are specified
by using an asterisk (*) within the pairs. A wildcard matches user input until
the next explicitly defined character in the opener is entered.

A wildcard in the closer is replaced by the string of characters to which the
wildcard character in the opener was matched. As an example, with
`g:pear_tree_pairs` containing the following rule: >
    '<*>': {'closer': '</*>'}
<Typing `<html>` yields `<html></html>`, `<ul>` yields `<ul></ul>`, etc.

Note: To include a literal asterisk in a rule, you must escape it with a
backslash like `\*`. Similarly, to include a literal backslash in a rule, you
must escape it with another backslash like `\\`.

Rule-Specific Options:                                *pear-tree-rule-options*

A Pear Tree rule may include several options to more finely tune its matching
behavior.

    not_in ~
    Form: `'not_in': [syntax_region, ...]`
    Function: Do not match the opener if the cursor is in a syntax region
              contained in the list (requires syntax to be enabled).
    Example: `'(': {'closer': ')', 'not_in': ['String', 'Comment']}`

    not_if ~
    Form: `'not_if': [string, ...]`
    Function: Do not match an opener that contains a wildcard if the value of
              that wildcard is contained in the list.
    Example: `'<*>': {'closer': '</*>', 'not_if': ['br', 'meta']}`

    not_like ~
    Form: `'not_like': regexp`
    Function: Do not match an opener that contains a wildcard if the value of
              that wildcard matches the regexp pattern. See |pattern| for
              valid patterns.
    Example: `'<*>': {'closer': '</*>', 'not_like': '/$'}`
             Typing `<img />` does not yield `<img /></img>` because the `/`
             in the opener matches the regexp pattern `'/$'`.

    not_at ~
    Form: `'not_at': [regexp, ...]`
    Function: Do not match an opener if it is typed at text that matches any
              of the patterns in the list. See |pattern| for valid patterns.
              If the value is `[]`, the opener is paired no matter what text
              comes before it.
    Example: `'f"': {'closer': '"', 'not_at': ['\w']}`
              The opening string `f"` is only paired with `"` if it is not
              typed after a word character (letter, number, or underscore).
    If not set, the value is `[]`, with one exception: the default value is
    `['\w']` for any pair whose closing string is the same as its opening string
    (e.g. `'` and `"`). This is because quote-like characters placed directly
    after words are often meant to act as the closing side of the pair rather
    than the opening side.

    until ~
    Form: `'until': regexp`
    Function: Replace the wildcard character in the closer with the wildcard
              string in the opener only until the regexp pattern is matched.
              See |pattern| for valid patterns.
    Example: `'<*>': {'closer': '</*>', 'until': '\W'}`
             Typing `<p class="foo">` yields `<p class="foo"></p>`, and not
             `<p class="foo"></p class="foo">` because the space after `<p`
             matches the regexp pattern `'\W'`.
    If not set, the value is `'[[:punct:][:space:]]'` (punctuation or space).

------------------------------------------------------------------------------
                                                     *g:pear_tree_ft_disabled*
Type: list ~
Default: [] ~

Define filetypes for which Pear Tree should be disabled.

To change the default value, add something like the following to your vimrc:
>
    let g:pear_tree_ft_disabled = ['c', 'python', 'markdown']
<
------------------------------------------------------------------------------
                                               *g:pear_tree_repeatable_expand*
                                               *b:pear_tree_repeatable_expand*
Type: number ~
Default: 1 ~

If the value is nonzero, expanding pairs will be dot-repeatable. This requires
the text after the cursor to be erased until |<Plug>(PearTreeFinishExpansion)|
is triggered.

If this value is 0, the text after the cursor will immediately be moved to the
next line. This is the typical behavior of other plugins and text editors, but
limitations of the |.| command lead to unexpected behavior as a result:

Enabled:                            Disabled: ~
>
    1  int foo();                       1  int foo();
    2  int bar();                       2  int bar();
<
                Add a return statement to foo
>
    1  int foo() {                      1  int foo() {
    2     return 0;                     2      return 0;
    3  }                                3  }
    4  int bar();                       4  int bar();
<
                Move to line 4 and press .
>
    1  int foo() {                      1  int foo() {
    2     return 0;                     2      return 0;
    3  }                                3  }
    4  int bar() {                      4  return 0;
    5     return 0;                     5  int bar();
    6  }
<
If preserving dot-repeat in cases like this is not a requirement, you may want
to add the following to your vimrc:
>
    let g:pear_tree_repeatable_expand = 0
<
------------------------------------------------------------------------------
                                                   *g:pear_tree_smart_openers*
                                                   *b:pear_tree_smart_openers*
Type: number ~
Default: 0 ~

If the value is nonzero, Pear Tree will attempt to maintain pair balance when
typing an opening string instead of always automatically inserting its closing
string:

                      |   Enabled    |   Disabled   |
        ---------------------------------------------
        |   Start     |  `foo(bar|))`  |  `foo(bar|))`  |
        |   Type (    |  `foo(bar(|))` |  `foo(bar(|)))`|
        |   Result    |  `foo(bar())`  |  `foo(bar()))` |

If enabled, Pear Tree will check if the second parenthesis is balanced. Since
it is not, typing `(` inserts only `(` and not `()`, thereby making both pairs
of parentheses balanced.

To enable, add the following to your vimrc:
>
    let g:pear_tree_smart_openers = 1
<
------------------------------------------------------------------------------
                                                   *g:pear_tree_smart_closers*
                                                   *b:pear_tree_smart_closers*
Type: number ~
Default: 0 ~

If the value is nonzero, Pear Tree will attempt to maintain pair balance when
typing a closing character instead of always moving past the one that follows
the cursor:

                      |   Enabled    |   Disabled   |
        ---------------------------------------------
        |   Start     |  `(foo(bar|)`  |  `(foo(bar|)`  |
        |   Type )    |  `(foo(bar)|)` |  `(foo(bar)|`  |
        |   Result    |  `(foo(bar))`  |  `(foo(bar)`   |

If enabled, Pear Tree will check if the first open parenthesis is balanced.
Since it is not, typing `)` inserts `)` instead of moving the cursor over the
close parenthesis, thereby making both pairs of parentheses balanced.

To enable, add the following to your vimrc:
>
    let g:pear_tree_smart_closers = 1
<
------------------------------------------------------------------------------
                                                 *g:pear_tree_smart_backspace*
                                                 *b:pear_tree_smart_backspace*
Type: number ~
Default: 0 ~

If the value is nonzero, |<Plug>(PearTreeBackspace)| will attempt to maintain
pair balance instead of always deleting empty pairs:

        | Backspace # |  Enabled   |  Disabled  |
        -----------------------------------------
        |      0      |  `(foo()|)`  |  `(foo()|)`  |
        |      1      |  `(foo(|)`   |  `(foo(|)`   |
        |      2      |  `(foo|)`    |  `(foo|`     |

If enabled, the first parenthesis remains balanced, while it becomes
erroneously unbalanced at #2 if disabled.

To enable, add the following to your vimrc:
>
    let g:pear_tree_smart_backspace = 1
<
------------------------------------------------------------------------------
                                                         *g:pear_tree_timeout*
                                                         *b:pear_tree_timeout*
Type: number ~
Default: 60 ~

Set a timeout (in milliseconds) for the balance-checking functions used for
smart pairs. A lower value will prevent delays when typing in larger files
while lowering the accuracy of smart pairing functions.

To disable timeouts, set this variable to a value less than or equal to 0.

This feature requires Vim to be compiled with |+reltime| support.

==============================================================================
MAPPINGS                                                  *pear-tree-mappings*

    <Plug>(PearTreeOpener) ................. |<Plug>(PearTreeOpener)|
    <Plug>(PearTreeCloser) ................. |<Plug>(PearTreeCloser)|
    <Plug>(PearTreeBackspace) .............. |<Plug>(PearTreeBackspace)|
    <Plug>(PearTreeExpand) ................. |<Plug>(PearTreeExpand)|
    <Plug>(PearTreeFinishExpansion) ........ |<Plug>(PearTreeFinishExpansion)|
    <Plug>(PearTreeJump) ................... |<Plug>(PearTreeJump)|
    <Plug>(PearTreeExpandOne) .............. |<Plug>(PearTreeExpandOne)|
    <Plug>(PearTreeJNR) .................... |<Plug>(PearTreeJNR)|

------------------------------------------------------------------------------
                                                      *<Plug>(PearTreeOpener)*
Default: varies ~

Pear Tree creates |<Plug>| mappings for every opening string in the pair
dictionary. The mapping is of the form `<Plug>(PearTreeOpener_x)` where x is
the final character of the opener.

To use a different key mapping to trigger auto-pairing for an opener, add
something like the following to your vimrc:
>
    imap <key> <Plug>(PearTreeOpener_[)
<
------------------------------------------------------------------------------
                                                      *<Plug>(PearTreeCloser)*
Default: varies ~

Pear Tree creates |<Plug>| mappings for every single-character closer in the
pair dictionary. Each mapping is of the form `<Plug>(PearTreeCloser_x)` where
x is the closer character. It is used to either insert the closer or move past
the closer that follows the cursor.

To use a different key mapping to trigger the Pear Tree functionality for a
closer, add something like the following to your vimrc:
>
    imap <key> <Plug>(PearTreeCloser_])
<
------------------------------------------------------------------------------
                                                   *<Plug>(PearTreeBackspace)*
Default: <BS> ~

If the cursor is between an opening character and closing character, delete
both. Otherwise, act like a typical backspace.

Example: `return foo(|)` becomes `return foo|`

To change the default mapping, add something like the following to your vimrc:
>
    imap <key> <Plug>(PearTreeBackspace)
<
------------------------------------------------------------------------------
                                                      *<Plug>(PearTreeExpand)*
Default: <CR> ~

If the cursor is between an opening string and a closing string, add a new
line and prepare to add the closing string on the line following the cursor's
new position.

In order to not break the |.| command, the closing string is temporarily
erased. It will automatically be added back to the line following the cursor
by |<Plug>(PearTreeFinishExpansion)|.

Example: >
    1  int foo() {|}
<
    becomes
>
    1  int foo() {
    2      |
    3
<
If |g:pear_tree_repeatable_expand| is 0, the closing string is immediately
moved to the line following the cursor instead of being erased.

To change the default mapping, add something like the following to your vimrc:
>
    imap <key> <Plug>(PearTreeExpand)
<
------------------------------------------------------------------------------
                                             *<Plug>(PearTreeFinishExpansion)*
Default: <Esc> ~

If |<Plug>(PearTreeExpand)| has been used, add the closing strings to their
proper positions. After they have been restored, leave insert mode.

Example: >
    1  int foo() {
    2      |
    3
<
    becomes
>
    1  int foo() {
    2      []
    3  }
<
To change the default mapping, add something like the following to your vimrc:
>
    imap <key> <Plug>(PearTreeFinishExpansion)
<
------------------------------------------------------------------------------
                                                   *<Plug>(PearTreeExpandOne)*
Default: none ~

If |<Plug>(PearTreeExpand)| has been used multiple times, leading to nested
pairs, add only the innermost closing string to its proper position.

Example: >
    1  <html>
    2      <body>
    3          <p>Type this and go to the next line.</p>
    4          |
    5
<
    becomes
>
    1  <html>
    2      <body>
    3          <p>Type this and go to the next line.</p>
    4      </body>|
    5
<
To set the mapping, add something like the following to your vimrc:
>
    imap <key> <Plug>(PearTreeExpandOne)
<
------------------------------------------------------------------------------
                                                        *<Plug>(PearTreeJump)*
Default: none ~

If the cursor is before a closing string whose opener appears earlier in the
buffer, move the cursor past the closing string.

Example: >
    1  <p class="foo">Hello, world!|</p>
<
    becomes
>
    1  <p class="foo">Hello, world!</p>|
<
To set the mapping, add something like the following to your vimrc:
>
    imap <key> <Plug>(PearTreeJump)
<
------------------------------------------------------------------------------
                                                         *<Plug>(PearTreeJNR)*
Default: none ~

If the cursor is before a closing string whose opener appears earlier in the
buffer, move the cursor past the closing string and insert a newline
("jump 'n' return").

Example: >
    1  <p class="foo">Hello, world!|</p>
<
    becomes
>
    1  <p class="foo">Hello, world!</p>
    2  |
<
To set the mapping, add something like the following to your vimrc:
>
    imap <key> <Plug>(PearTreeJNR)
<
==============================================================================
COMMANDS                                                  *pear-tree-commands*

    PearTreeEnable ......................... |PearTreeEnable|
    PearTreeDisable ........................ |PearTreeDisable|

------------------------------------------------------------------------------
*PearTreeEnable*                Enable Pear Tree for the current buffer. You
                              can enable Pear Tree for every buffer by using
                              this command with |:bufdo|.

*PearTreeDisable*               Disable Pear Tree for the current buffer. You
                              can disable Pear Tree for every buffer by using
                              this command with |:bufdo|.

==============================================================================
" vim:tw=78:ts=4:sts=4:sw=4:ft=help:norl:
