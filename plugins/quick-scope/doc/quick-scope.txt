*quick-scope.txt* Highlight unique character targets for f/F and t/T motions.
*quick-scope*

Version:            2.5.0
Homepage:           https://github.com/unblevable/quick-scope
Authors:            Brian Le (unblevable)
                    Bradford Smith (https://github.com/bradford-smith94)
                    (wrote version 2)
License:            MIT

 0. CONTENTS                                                     *qs-contents*
==============================================================================

  1. quick-scope Introduction ................. |qs-intro|
  2. Usage .................................... |qs-usage|
    2.1 Example ............................... |qs-example|
  3. Features ................................. |qs-features|
  4. Options .................................. |qs-options|
    4.1 Highlight on key press ................ |qs-highlight-on-key-press|
    4.2 Customize colors ...................... |qs-customize-colors|
    4.3 Toggle highlighting ................... |qs-toggle-highlighting|
    4.4 Disable on lone lings.................. |qs-disable-on-longlines|
    4.5 Accepted Characters.................... |qs-accepted-chars|
    4.6 Lazy Highlight......................... |qs-lazy-highlight|
  5. Motivation ............................... |qs-motivation|
  6. Bugs ..................................... |qs-bugs|
    6.1 Known bugs ............................ |qs-known-bugs|
  7. Changelog ................................ |qs-changelog|

 1. QUICK-SCOPE INTRODUCTION                                        *qs-intro*
==============================================================================

This plugin highlights the optimal characters to target for the |f|, |F|, |t|
and |T| motions for easier and faster left-right movement in Vim.

If you don't routinely use these keys you should! See `:help` |f| and `:help`
|;| to get started and |qs-motivation| for a detailed look at why these keys
are so useful.

In practice, this plugin should help you get to any word on a line in two or
three keystrokes with built-in Vim commands.

 2. USAGE                                                           *qs-usage*
==============================================================================

If you're viewing this file in Vim and have quick-scope installed, you should
already have good idea of what it does.

Otherwise, see https://github.com/unblevable/quick-scope#Features for
screencaps of this plugin in action.

 2.1 EXAMPLE                                                      *qs-example*
------------------------------------------------------------------------------

Place your cursor at the beginning the line below:
>
  It's just like the story of the grasshopper and the octopus.

You should see at least one highlighted character in all but one |word|.

A character is highlighted with a |qs-primary-color| or |qs-secondary-color|
if it is the first/second occurrence of that character from your cursor on a
line.

Use |f|<char> or |F|<char> to jump directly to any character with a primary
highlight forward or backward.

The `h` in `the` should be the only character with a secondary highlight if
your cursor is at the beginning of the example. Use `fh;` to quickly move to
it.

 3. FEATURES                                                     *qs-features*
==============================================================================

- Quick-scope highlights the first occurrences of characters to the left and
  right of your cursor, once per word, everytime your cursor moves.

- If a word does not contain a first occurrence of a character but contains a
  second occurrence of a character, that character is highlighted in another
  color.

- Quick-scope takes extra measures to avoid bombarding you with superfluous
  colors:

  - It ignores special characters since they are easy to eye and tend to only
    appear once or twice on a line.

  - By default, it samples colors from your active color scheme for its
    highlighting.

 4. OPTIONS                                                       *qs-options*
==============================================================================

 4.1 HIGHLIGHT ON KEY PRESS                        *qs-highlight-on-key-press*
------------------------------------------------------------------------------

                                                      *g:qs_highlight_on_keys*
Trigger a highlight in the appropriate direction when pressing these keys:
>
  let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
<
Trigger a highlight only when pressing |f| and |F|.
>
  let g:qs_highlight_on_keys = ['f', 'F']
<
 4.2 CUSTOMIZE COLORS                                    *qs-customize-colors*
------------------------------------------------------------------------------

                                                            *qs-primary-color*
To set the (primary) color for the first occurrence of a character simply
define the highlight group `QuickScopePrimary`. The default is to link this
group to the `Function` group.

>
  highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
<
                                                          *qs-secondary-color*
To set the (secondary) color for the second occurrence of a character simply
define the highlight group `QuickScopeSecondary`. The default is to link this
group to the `Define` group.

>
  highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
<

It is recommended to put these in an |autocmd| so that they are updated when
the colorscheme updates. Make sure this autocmd group is set before you set
colorscheme, so that the autocmd event properly triggers the highlight
commands.

>
  augroup qs_colors
    autocmd!
    autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
    autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
  augroup END
<
 4.3 TOGGLE HIGHLIGHTING                              *qs-toggle-highlighting*
------------------------------------------------------------------------------

                                                           *:QuickScopeToggle*
Turn highlight on or off with a user command:
>
  :QuickScopeToggle
<
                                                    *<plug>(QuickScopeToggle)*
Create a custom mapping (<leader> + q in the example below):
>
  nmap <leader>q <plug>(QuickScopeToggle)
  xmap <leader>q <plug>(QuickScopeToggle)
<
Notice that you must use |:nmap| and |:xmap| instead of |:nnoremap| and
|:xnoremap|.

                                                                 *g:qs_enable*
Setting `g:qs_enable` equal to zero will start the plugin disabled.
(default: `1`)
>
  let g:qs_enable=0
<

                                                          *b:qs_local_disable*
Additionally, setting the buffer local variable `b:qs_local_disable` will have
the same effect on a specific buffer.
>
  let b:qs_local_disable=1
<

 4.4 DISABLE ON LONG LINES                           *qs-disable-on-longlines*
------------------------------------------------------------------------------

                                                              *g:qs_max_chars*
Turn off this plugin when the length of a line is longer than
`g:qs_max_chars`. (default: `1000`)
>
  let g:qs_max_chars=80
<

4.5 ACCEPTED CHARACTERS                                    *qs-accepted-chars*
------------------------------------------------------------------------------

                                                         *g:qs_accepted_chars*
The option `g:qs_accepted_chars` is a list of characters that quick-scope will
highlight. (default: a list of `a-z, A-Z, 0-9`)
>
  let g:qs_accepted_chars = [ 'a', 'b', ... etc ]
<

4.6 LAZY HIGHLIGHT                                         *qs-lazy-highlight*
------------------------------------------------------------------------------

                                                         *g:qs_lazy_highlight*
The option `g:qs_lazy_highlight` can be used to change the vanilla highlight
mode autocmd event from |CursorMoved| to |CursorHold|. This option is provided
to reduce the slowdown caused by vanilla highlight mode in large terminals.
(default: `0`)
>
  let g:qs_lazy_highlight = 1
<

 5. MOTIVATION                                                 *qs-motivation*
==============================================================================

In the link below is a detailed look at the most common and useful options for
moving your cursor across a line in Vim:
https://github.com/unblevable/quick-scope#moving-across-a-line

When you are aware of the existing tools available to you and their tradeoffs,
you can better understand the benefits of this plugin.

 6. BUGS                                                             *qs-bugs*
==============================================================================

Post any bug or feature request here:
http://github.com/unblevable/quick-scope/issues

 6.1 KNOWN BUGS                                                *qs-known-bugs*
------------------------------------------------------------------------------

- Indenting with |<<| or |>>| throws off the highlights.

- The primary highlighting function can be very slow and is called everytime
  the cursor moves.

  Let me know if this plugin slows down Vim to an unmanageable level. Using
  |:QuickScopeToggle|, make sure that it is actually this plugin that is
  causing performance problems you are experiencing. Also, try out the
  |g:qs_lazy_highlight| option.

 7. CHANGELOG                                                   *qs-changelog*
==============================================================================

 Version   Date         Release Notes~
|---------|-----------|-----------------------------------------------------------|
 2.5.0     2019-02-09 * Fixed/Added
                        - Fixed issue restoring saved highlight groups
                        - Added option to change vanilla highlight mode autocmd
                          event from CursorMoved to CursorHold to resolve
                          slowdown issues
                        - Fixed terminal cursor changing bug
 2.4.1     2018-04-15 * Fixed
                        - Fixed highlights stay when leaving the window while
                          using the vanilla highlight mode
 2.4.0     2018-04-15 * Added
                        - Added a backwards compatibility layer for old
                          highlight variables, this removes the breaking change
                          from v2.0.0
                        - Also, this represents the completed merge of
                          bradford-smith94/quick-scope back into
                          unblevable/quick-scope
 2.3.5     2018-03-07 * Fixed
                        - Fixed quick-scope interpreting text separated by
                          underscores as different words
 2.3.4     2018-03-05 * Fixed
                        - Fixed E714 in DoubleTap() introduced in multibyte
                          merge
 2.3.3     2018-02-19 * Changed
                        - Moved function definitions to autoload/ for small
                          startuptime improvement
 2.3.2     2017-11-19 * Fixed
                        - Vanilla mode works again after the multibyte merge
                          (v2.3.0) caused Vim to freeze when highlighting
 2.3.1     2017-11-18 * Fixed
                        - No longer clobbers <c-c> mappings
 2.3.0     2017-11-04 * Added
                        - Added multibyte support
                        - Added |g:qs_accepted_chars|
 2.2.0     2017-09-19 * Added
                        - Added |b:qs_local_disable| option
 2.1.1     2017-09-17 * Fixed
                        - Re-enable plugin in |visual-mode| and |operator-pending|
                          mode after fixing |select-mode|
 2.1.0     2017-09-15 * Added
                        - Added |g:qs_max_chars| option
 2.0.1     2017-09-14 * Fixed
                        - No longer clobbers |Select-mode|
 2.0.0     2017-09-14 * Changed
                        - Re-wrote how highlighting works, see
                          |qs-customize-colors| for how the new system works
|---------|-----------|-----------------------------------------------------------|
 1.1.1     2015-09-30 * Fixed
                        - Works after sourcing `.vimrc`
                        - Works after changing 'colorscheme'
 1.1.0     2015-08-20 * Added
                        - Added |g:qs_highlight_on_keys| option
 1.0.1     2015-08-02 * Changed
                        - Made the help doc link consistent with the plugin's
                          name (quick-scope)
                        Fixed
                        - The highlight color selection on startup is more
                          robust.
                        - Works with Neovim with true color enabled
|---------|-----------|-----------------------------------------------------------|
 1.0.0     2015-08-02 * Initial upload

==============================================================================
vim:tw=78:sw=2:ts=2:ft=help:norl:nowrap:
